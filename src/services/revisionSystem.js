// src/services/revisionSystem.js
// Syst√®me de R√©p√©tition Espac√©e (SRS) bas√© sur l'algorithme SM-2 (SuperMemo)

/**
 * Algorithme de r√©p√©tition espac√©e
 * Bas√© sur la courbe d'oubli d'Ebbinghaus et l'algorithme SM-2
 * 
 * Intervalles de r√©vision :
 * - Facile : 1j ‚Üí 3j ‚Üí 7j ‚Üí 15j ‚Üí 30j ‚Üí 60j ‚Üí 120j
 * - Moyen : 1j ‚Üí 2j ‚Üí 4j ‚Üí 7j ‚Üí 14j ‚Üí 30j ‚Üí 60j
 * - Difficile : R√©initialise √† 1 jour
 * - Oubli√© : Recommence depuis le d√©but
 */

export const DIFFICULTY_LEVELS = {
  FORGOT: 0,      // Compl√®tement oubli√©
  DIFFICULT: 1,   // Tr√®s difficile
  MEDIUM: 2,      // Moyen
  EASY: 3,        // Facile
  PERFECT: 4      // Parfait
};

export const REVIEW_STATUS = {
  NEW: 'new',              // Jamais r√©vis√©
  LEARNING: 'learning',    // En apprentissage (< 3 r√©visions)
  REVIEWING: 'reviewing',  // En r√©vision r√©guli√®re
  MASTERED: 'mastered'     // Ma√Ætris√© (> 10 r√©visions)
};

/**
 * Calcule le prochain intervalle de r√©vision
 * @param {number} currentInterval - Intervalle actuel en jours
 * @param {number} difficulty - Niveau de difficult√© (0-4)
 * @param {number} repetitions - Nombre de r√©p√©titions r√©ussies
 * @returns {number} Prochain intervalle en jours
 */
export const calculateNextInterval = (currentInterval, difficulty, repetitions) => {
  if (difficulty === DIFFICULTY_LEVELS.FORGOT) {
    // R√©initialiser : revenir au d√©but
    return 1;
  }

  if (difficulty === DIFFICULTY_LEVELS.DIFFICULT) {
    // R√©duire l'intervalle de 50%
    return Math.max(1, Math.floor(currentInterval * 0.5));
  }

  // Facteurs de facilit√© bas√©s sur SM-2
  const easeFactor = {
    [DIFFICULTY_LEVELS.MEDIUM]: 1.5,
    [DIFFICULTY_LEVELS.EASY]: 2.0,
    [DIFFICULTY_LEVELS.PERFECT]: 2.5
  }[difficulty] || 1.5;

  // Premi√®re r√©vision : 1 jour
  if (repetitions === 0) return 1;
  
  // Deuxi√®me r√©vision : selon la difficult√©
  if (repetitions === 1) {
    return difficulty === DIFFICULTY_LEVELS.PERFECT ? 3 : 2;
  }

  // R√©visions suivantes : augmentation exponentielle
  return Math.round(currentInterval * easeFactor);
};

/**
 * Calcule la date de prochaine r√©vision
 * @param {number} intervalDays - Intervalle en jours
 * @returns {Date} Date de prochaine r√©vision
 */
export const calculateNextReviewDate = (intervalDays) => {
  const nextDate = new Date();
  nextDate.setDate(nextDate.getDate() + intervalDays);
  nextDate.setHours(9, 0, 0, 0); // 9h du matin
  return nextDate;
};

/**
 * D√©termine le statut de r√©vision
 * @param {number} repetitions - Nombre de r√©p√©titions
 * @param {number} interval - Intervalle actuel
 * @returns {string} Statut de r√©vision
 */
export const getReviewStatus = (repetitions, interval) => {
  if (repetitions === 0) return REVIEW_STATUS.NEW;
  if (repetitions < 3) return REVIEW_STATUS.LEARNING;
  if (repetitions >= 10 && interval >= 30) return REVIEW_STATUS.MASTERED;
  return REVIEW_STATUS.REVIEWING;
};

/**
 * V√©rifie si une sourate doit √™tre r√©vis√©e aujourd'hui
 * @param {Date} nextReviewDate - Date de prochaine r√©vision
 * @returns {boolean}
 */
export const isDueForReview = (nextReviewDate) => {
  if (!nextReviewDate) return false;
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const reviewDate = new Date(nextReviewDate);
  reviewDate.setHours(0, 0, 0, 0);
  return reviewDate <= today;
};

/**
 * Calcule le score de r√©tention (0-100%)
 * Bas√© sur le nombre de r√©p√©titions et la facilit√© moyenne
 * @param {number} repetitions - Nombre de r√©p√©titions
 * @param {number} averageDifficulty - Difficult√© moyenne (0-4)
 * @returns {number} Score de r√©tention (0-100)
 */
export const calculateRetentionScore = (repetitions, averageDifficulty) => {
  if (repetitions === 0) return 0;
  
  const repetitionScore = Math.min(repetitions * 10, 70); // Max 70% pour les r√©p√©titions
  const difficultyScore = (averageDifficulty / 4) * 30; // Max 30% pour la facilit√©
  
  return Math.min(Math.round(repetitionScore + difficultyScore), 100);
};

/**
 * Obtient un message motivant selon le statut
 * @param {string} status - Statut de r√©vision
 * @returns {string} Message motivant
 */
export const getMotivationalMessage = (status) => {
  const messages = {
    [REVIEW_STATUS.NEW]: "üå± Nouvelle sourate ! C'est parti pour l'apprendre !",
    [REVIEW_STATUS.LEARNING]: "üìö Continue, tu es en plein apprentissage !",
    [REVIEW_STATUS.REVIEWING]: "üîÑ R√©vise r√©guli√®rement pour ancrer la m√©morisation !",
    [REVIEW_STATUS.MASTERED]: "üåü Ma√Ætris√©e ! Continue les r√©visions pour ne jamais oublier !"
  };
  return messages[status] || "üí™ Continue comme √ßa !";
};

/**
 * Obtient les sourates √† r√©viser aujourd'hui
 * @param {Array} surahReviews - Liste des r√©visions de sourates
 * @returns {Array} Sourates √† r√©viser
 */
export const getSurahsDueToday = (surahReviews) => {
  return surahReviews.filter(review => isDueForReview(review.next_review_date));
};

/**
 * Obtient les statistiques de r√©vision globales
 * @param {Array} surahReviews - Liste des r√©visions
 * @returns {Object} Statistiques
 */
export const getReviewStats = (surahReviews) => {
  const total = surahReviews.length;
  const dueToday = getSurahsDueToday(surahReviews).length;
  
  const byStatus = {
    new: 0,
    learning: 0,
    reviewing: 0,
    mastered: 0
  };

  surahReviews.forEach(review => {
    const status = getReviewStatus(review.repetitions, review.interval_days);
    byStatus[status]++;
  });

  return {
    total,
    dueToday,
    new: byStatus.new,
    learning: byStatus.learning,
    reviewing: byStatus.reviewing,
    mastered: byStatus.mastered
  };
};

export default {
  DIFFICULTY_LEVELS,
  REVIEW_STATUS,
  calculateNextInterval,
  calculateNextReviewDate,
  getReviewStatus,
  isDueForReview,
  calculateRetentionScore,
  getMotivationalMessage,
  getSurahsDueToday,
  getReviewStats
};